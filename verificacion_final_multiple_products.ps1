#!/usr/bin/env pwsh

Write-Host "üéØ VERIFICACI√ìN FINAL - DATOS REALES M√öLTIPLES PRODUCTOS" -ForegroundColor Green
Write-Host "========================================================" -ForegroundColor Cyan

function Write-Status {
    param([string]$Message, [string]$Color = "White")
    Write-Host "üìã $Message" -ForegroundColor $Color
}

# Verificar el servicio de an√°lisis tiene las correcciones
$frontendPath = "d:\PROGRAMAS CREADOS PROBADOS 2025\pollos-chanchos Angular\frontend"
$archivoAnalisis = "$frontendPath\src\app\shared\services\analisis-inventario.service.ts"

Write-Status "Verificando correcciones aplicadas..." "Yellow"

if (Test-Path $archivoAnalisis) {
    $contenido = Get-Content $archivoAnalisis -Raw
    
    $correcciones = @(
        @{nombre="M√©todo filter para m√∫ltiples etapas"; patron="etapasCorrespondientes = planPollo\.detalles\.filter"},
        @{nombre="ForEach para sumar productos"; patron="etapasCorrespondientes\.forEach"},
        @{nombre="Suma acumulativa de cantidades"; patron="cantidadTotalDiariaKg \+="},
        @{nombre="Log detallado de productos"; patron="productosDetalle: productosUsados"},
        @{nombre="B√∫squeda mejorada de plan"; patron="animalName\.includes\('pollo'\)"}
    )
    
    foreach ($correccion in $correcciones) {
        if ($contenido -match $correccion.patron) {
            Write-Status "‚úÖ $($correccion.nombre)" "Green"
        } else {
            Write-Status "‚ùå FALTA: $($correccion.nombre)" "Red"
        }
    }
} else {
    Write-Status "‚ùå Archivo no encontrado: $archivoAnalisis" "Red"
    exit 1
}

Write-Host ""
Write-Status "Iniciando servicios con datos reales configurados..." "Cyan"

# Cambiar al directorio backend
Set-Location "d:\PROGRAMAS CREADOS PROBADOS 2025\pollos-chanchos Angular\backend"

# Compilar backend
Write-Status "Compilando backend..." "Yellow"
& .\mvnw.cmd clean compile -q

if ($LASTEXITCODE -eq 0) {
    Write-Status "‚úÖ Backend compilado correctamente" "Green"
} else {
    Write-Status "‚ö†Ô∏è Advertencias en la compilaci√≥n" "Yellow"
}

# Iniciar backend
Write-Status "Iniciando backend..." "Yellow"
$backendProcess = Start-Process -FilePath ".\mvnw.cmd" -ArgumentList "spring-boot:run" -PassThru -WindowStyle Hidden

# Esperar backend
Write-Status "Esperando backend (30 segundos m√°ximo)..." "Yellow"
$backendReady = $false
for ($i = 1; $i -le 15; $i++) {
    Start-Sleep -Seconds 2
    try {
        $healthCheck = Invoke-WebRequest -Uri "http://localhost:8080/api/health" -TimeoutSec 3 -ErrorAction SilentlyContinue
        if ($healthCheck.StatusCode -eq 200) {
            $backendReady = $true
            Write-Status "‚úÖ Backend disponible en puerto 8080" "Green"
            break
        }
    } catch {
        Write-Host "." -NoNewline -ForegroundColor Yellow
    }
}

if (-not $backendReady) {
    Write-Host ""
    Write-Status "‚ö†Ô∏è Backend tardando en responder, continuando..." "Yellow"
}

# Cambiar al directorio frontend
Set-Location "d:\PROGRAMAS CREADOS PROBADOS 2025\pollos-chanchos Angular\frontend"

# Instalar dependencias si es necesario
if (-not (Test-Path "node_modules")) {
    Write-Status "Instalando dependencias npm..." "Yellow"
    npm install --silent
}

# Iniciar frontend
Write-Status "Iniciando frontend Angular..." "Yellow"
$frontendProcess = Start-Process -FilePath "npm" -ArgumentList "start" -PassThru -WindowStyle Hidden

# Esperar frontend
Write-Status "Esperando frontend (60 segundos m√°ximo)..." "Yellow"
$frontendReady = $false
for ($i = 1; $i -le 30; $i++) {
    Start-Sleep -Seconds 2
    try {
        $appCheck = Invoke-WebRequest -Uri "http://localhost:4200" -TimeoutSec 3 -ErrorAction SilentlyContinue
        if ($appCheck.StatusCode -eq 200) {
            $frontendReady = $true
            Write-Status "‚úÖ Frontend disponible en puerto 4200" "Green"
            break
        }
    } catch {
        Write-Host "." -NoNewline -ForegroundColor Yellow
    }
}

if (-not $frontendReady) {
    Write-Host ""
    Write-Status "‚ö†Ô∏è Frontend tardando en responder..." "Yellow"
}

Write-Host ""
Write-Host "üéØ CORRECCI√ìN APLICADA: M√öLTIPLES PRODUCTOS POR ETAPA" -ForegroundColor Green
Write-Host "=====================================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "üîß CAMBIOS IMPLEMENTADOS:" -ForegroundColor Yellow
Write-Host "  ‚Ä¢ M√©todo filter() para obtener TODAS las etapas del rango de d√≠as" -ForegroundColor White
Write-Host "  ‚Ä¢ forEach() para sumar cada producto individualmente" -ForegroundColor White
Write-Host "  ‚Ä¢ Suma acumulativa: cantidadTotalDiariaKg += etapa.cantidad" -ForegroundColor White
Write-Host "  ‚Ä¢ Logging detallado para debugging" -ForegroundColor White
Write-Host ""
Write-Host "üìä DATOS ESPERADOS (Plan Pollos, etapa 1-20 d√≠as):" -ForegroundColor Green
Write-Host "  üåΩ Ma√≠z: 0.2 kg/animal/d√≠a" -ForegroundColor Yellow
Write-Host "  ü•£ Balanceado: 0.1 kg/animal/d√≠a" -ForegroundColor Yellow  
Write-Host "  üåæ Ahipal: 0.05 kg/animal/d√≠a" -ForegroundColor Yellow
Write-Host "  üìà TOTAL SUMA: 0.35 kg/animal/d√≠a" -ForegroundColor Green
Write-Host ""
Write-Host "üåê ENLACES DE VERIFICACI√ìN:" -ForegroundColor Cyan
Write-Host "  üìã Admin Panel: http://localhost:4200/admin/plan-nutricional" -ForegroundColor White
Write-Host "  üçñ Alimentaci√≥n: http://localhost:4200/pollos/alimentacion" -ForegroundColor White
Write-Host "  üìä Inventario: http://localhost:4200/pollos/inventario" -ForegroundColor White
Write-Host ""
Write-Host "üîç C√ìMO VERIFICAR LOS DATOS REALES:" -ForegroundColor Yellow
Write-Host ""
Write-Host "1Ô∏è‚É£ EN ADMIN PANEL:" -ForegroundColor Green
Write-Host "   ‚Ä¢ Ir a Plan Nutricional" -ForegroundColor White
Write-Host "   ‚Ä¢ Buscar plan para 'Pollos'" -ForegroundColor White
Write-Host "   ‚Ä¢ Verificar etapa 1-20 d√≠as tiene:" -ForegroundColor White
Write-Host "     - Ma√≠z: 0.2 kg/d√≠a" -ForegroundColor White
Write-Host "     - Balanceado: 0.1 kg/d√≠a" -ForegroundColor White
Write-Host "     - Ahipal: 0.05 kg/d√≠a" -ForegroundColor White
Write-Host ""
Write-Host "2Ô∏è‚É£ EN M√ìDULO ALIMENTACI√ìN:" -ForegroundColor Green
Write-Host "   ‚Ä¢ Seleccionar un lote joven (6-10 d√≠as de edad)" -ForegroundColor White
Write-Host "   ‚Ä¢ El placeholder debe mostrar: cantidad_total = 0.35 √ó num_pollos" -ForegroundColor White
Write-Host "   ‚Ä¢ Ejemplo: 100 pollos = 35 kg/d√≠a sugeridos" -ForegroundColor White
Write-Host ""
Write-Host "3Ô∏è‚É£ EN CONSOLA DEL NAVEGADOR (F12):" -ForegroundColor Green
Write-Host "   Buscar estos logs:" -ForegroundColor White
Write-Host "   ‚Ä¢ 'üîç Analizando lotes con planes reales...'" -ForegroundColor White
Write-Host "   ‚Ä¢ '‚úÖ Plan encontrado para pollos:'" -ForegroundColor White
Write-Host "   ‚Ä¢ 'üîç Encontradas X etapas para d√≠as 6-10'" -ForegroundColor White
Write-Host "   ‚Ä¢ 'ü•¨ Ma√≠z: 0.2 kg/d√≠a'" -ForegroundColor White
Write-Host "   ‚Ä¢ 'ü•¨ Balanceado: 0.1 kg/d√≠a'" -ForegroundColor White
Write-Host "   ‚Ä¢ 'ü•¨ Ahipal: 0.05 kg/d√≠a'" -ForegroundColor White
Write-Host "   ‚Ä¢ 'üìã TOTAL calculado: 0.35 kg/animal/d√≠a'" -ForegroundColor White
Write-Host ""
Write-Host "4Ô∏è‚É£ EN AN√ÅLISIS DE INVENTARIO:" -ForegroundColor Green
Write-Host "   ‚Ä¢ Los c√°lculos deben usar cantidades reales" -ForegroundColor White
Write-Host "   ‚Ä¢ No m√°s valores hardcodeados de 0.20 kg" -ForegroundColor White
Write-Host "   ‚Ä¢ Costos basados en precios reales de productos" -ForegroundColor White

# Abrir navegadores autom√°ticamente
Write-Host ""
Write-Status "Abriendo p√°ginas de verificaci√≥n..." "Green"

Start-Sleep -Seconds 2
Start-Process "http://localhost:4200/admin/plan-nutricional"

Start-Sleep -Seconds 2  
Start-Process "http://localhost:4200/pollos/alimentacion"

Start-Sleep -Seconds 2
Start-Process "http://localhost:4200/pollos/inventario"

Write-Host ""
Write-Host "üß™ PASOS DE VERIFICACI√ìN:" -ForegroundColor Yellow
Write-Host "1. Admin Panel: Confirmar plan 'Pollos' configurado correctamente" -ForegroundColor White
Write-Host "2. Alimentaci√≥n: Verificar placeholder suma los 3 productos" -ForegroundColor White
Write-Host "3. Inventario: Verificar an√°lisis usa datos reales" -ForegroundColor White
Write-Host "4. Console (F12): Revisar logs de c√°lculo detallados" -ForegroundColor White
Write-Host ""
Write-Host "Si ve los datos correctos (Ma√≠z 0.2 + Balanceado 0.1 + Ahipal 0.05)," -ForegroundColor Green
Write-Host "¬°la correcci√≥n est√° funcionando perfectamente!" -ForegroundColor Green
Write-Host ""
Write-Host "Presiona CTRL+C cuando hayas terminado de verificar..." -ForegroundColor Yellow

try {
    # Mantener el script corriendo
    while ($true) {
        Start-Sleep -Seconds 10
        
        # Verificar que los procesos siguen corriendo
        if ($backendProcess -and $backendProcess.HasExited) {
            Write-Status "‚ùå Backend se detuvo inesperadamente" "Red"
            break
        }
        
        if ($frontendProcess -and $frontendProcess.HasExited) {
            Write-Status "‚ùå Frontend se detuvo inesperadamente" "Red"
            break
        }
    }
} catch {
    Write-Status "Cerrando servicios..." "Yellow"
} finally {
    # Cleanup
    if ($backendProcess -and -not $backendProcess.HasExited) {
        $backendProcess.Kill()
    }
    
    if ($frontendProcess -and -not $frontendProcess.HasExited) {
        $frontendProcess.Kill()
    }
    
    # Asegurar que todos los procesos Java y Node se detengan
    Get-Process -Name "java" -ErrorAction SilentlyContinue | Stop-Process -Force
    Get-Process -Name "node" -ErrorAction SilentlyContinue | Stop-Process -Force
    
    Write-Status "‚úÖ Servicios detenidos" "Green"
}

Write-Host ""
Write-Host "¬°Sistema actualizado para manejar m√∫ltiples productos correctamente! üéØ" -ForegroundColor Green
